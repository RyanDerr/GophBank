// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE gophbank.accounts SET balance = balance + $1 WHERE account_id = $2 RETURNING account_id, user_id, account_type, balance, interest_rate, created_at
`

type AddAccountBalanceParams struct {
	Amount string `json:"amount"`
	ID     int32  `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (GophbankAccounts, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i GophbankAccounts
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountType,
		&i.Balance,
		&i.InterestRate,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO gophbank.accounts (user_id, account_type, balance, interest_rate) VALUES ($1, $2, $3, $4) RETURNING account_id, user_id, account_type, balance, interest_rate, created_at
`

type CreateAccountParams struct {
	UserID       sql.NullInt32   `json:"user_id"`
	AccountType  AccountTypeEnum `json:"account_type"`
	Balance      string          `json:"balance"`
	InterestRate sql.NullString  `json:"interest_rate"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (GophbankAccounts, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserID,
		arg.AccountType,
		arg.Balance,
		arg.InterestRate,
	)
	var i GophbankAccounts
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountType,
		&i.Balance,
		&i.InterestRate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM gophbank.accounts WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, user_id, account_type, balance, interest_rate, created_at FROM gophbank.accounts WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int32) (GophbankAccounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i GophbankAccounts
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountType,
		&i.Balance,
		&i.InterestRate,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT account_id, user_id, account_type, balance, interest_rate, created_at FROM gophbank.accounts WHERE account_id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, accountID int32) (GophbankAccounts, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, accountID)
	var i GophbankAccounts
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountType,
		&i.Balance,
		&i.InterestRate,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, user_id, account_type, balance, interest_rate, created_at FROM gophbank.accounts WHERE user_id = $1 ORDER BY account_id LIMIT $2 OFFSET $3
`

type ListAccountsParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]GophbankAccounts, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GophbankAccounts
	for rows.Next() {
		var i GophbankAccounts
		if err := rows.Scan(
			&i.AccountID,
			&i.UserID,
			&i.AccountType,
			&i.Balance,
			&i.InterestRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE gophbank.accounts SET balance = $2 WHERE account_id = $1 RETURNING account_id, user_id, account_type, balance, interest_rate, created_at
`

type UpdateAccountParams struct {
	AccountID int32  `json:"account_id"`
	Balance   string `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (GophbankAccounts, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.AccountID, arg.Balance)
	var i GophbankAccounts
	err := row.Scan(
		&i.AccountID,
		&i.UserID,
		&i.AccountType,
		&i.Balance,
		&i.InterestRate,
		&i.CreatedAt,
	)
	return i, err
}

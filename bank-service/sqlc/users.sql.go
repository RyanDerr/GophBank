// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO gophbank.users (first_name, last_name, email) VALUES ($1, $2, $3) RETURNING user_id, first_name, last_name, email
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FirstName, arg.LastName, arg.Email)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM gophbank.users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, first_name, last_name, email FROM gophbank.users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, first_name, last_name, email FROM gophbank.users ORDER BY user_id LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]GophbankUsers, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GophbankUsers
	for rows.Next() {
		var i GophbankUsers
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAll = `-- name: UpdateUserAll :one
UPDATE gophbank.users SET first_name = $1, last_name = $2, email = $3 WHERE user_id = $4 RETURNING user_id, first_name, last_name, email
`

type UpdateUserAllParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	UserID    int32  `json:"user_id"`
}

func (q *Queries) UpdateUserAll(ctx context.Context, arg UpdateUserAllParams) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, updateUserAll,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.UserID,
	)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE gophbank.users SET email = $1 WHERE user_id = $2 RETURNING user_id, first_name, last_name, email
`

type UpdateUserEmailParams struct {
	Email  string `json:"email"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, updateUserEmail, arg.Email, arg.UserID)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const updateUserFirstName = `-- name: UpdateUserFirstName :one
UPDATE gophbank.users SET first_name = $1 WHERE user_id = $2 RETURNING user_id, first_name, last_name, email
`

type UpdateUserFirstNameParams struct {
	FirstName string `json:"first_name"`
	UserID    int32  `json:"user_id"`
}

func (q *Queries) UpdateUserFirstName(ctx context.Context, arg UpdateUserFirstNameParams) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, updateUserFirstName, arg.FirstName, arg.UserID)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const updateUserLastName = `-- name: UpdateUserLastName :one
UPDATE gophbank.users SET last_name = $1 WHERE user_id = $2 RETURNING user_id, first_name, last_name, email
`

type UpdateUserLastNameParams struct {
	LastName string `json:"last_name"`
	UserID   int32  `json:"user_id"`
}

func (q *Queries) UpdateUserLastName(ctx context.Context, arg UpdateUserLastNameParams) (GophbankUsers, error) {
	row := q.db.QueryRowContext(ctx, updateUserLastName, arg.LastName, arg.UserID)
	var i GophbankUsers
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type AccountTypeEnum string

const (
	AccountTypeEnumChecking AccountTypeEnum = "checking"
	AccountTypeEnumSavings  AccountTypeEnum = "savings"
)

func (e *AccountTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountTypeEnum(s)
	case string:
		*e = AccountTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountTypeEnum: %T", src)
	}
	return nil
}

type NullAccountTypeEnum struct {
	AccountTypeEnum AccountTypeEnum `json:"account_type_enum"`
	Valid           bool            `json:"valid"` // Valid is true if AccountTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.AccountTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountTypeEnum), nil
}

type GophbankAccounts struct {
	AccountID    int32           `json:"account_id"`
	UserID       int32           `json:"user_id"`
	AccountType  AccountTypeEnum `json:"account_type"`
	Balance      float64         `json:"balance"`
	InterestRate float64         `json:"interest_rate"`
	CreatedAt    time.Time       `json:"created_at"`
}

type GophbankTransactions struct {
	TransactionID   int32     `json:"transaction_id"`
	FromAccountID   int32     `json:"from_account_id"`
	ToAccountID     int32     `json:"to_account_id"`
	Amount          float64   `json:"amount"`
	TransactionTime time.Time `json:"transaction_time"`
}

type GophbankUsers struct {
	UserID    int32     `json:"user_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}
